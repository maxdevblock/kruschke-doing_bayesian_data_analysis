matplot(fit$time, fit[ , 2:4], type = "l", xlab = "Day", ylab = "Number of subjects", lwd = 2, lty = 1, col = col)
matplot(fit$time, fit[ , 2:4], type = "l", xlab = "Day", ylab = "Number of subjects", lwd = 2, lty = 1, col = col, log = "y")
points(Day, Infected)
R0 <- setNames(Opt_par["beta"] / Opt_par["gamma"], "R0")
fit[fit$I == max(fit$I), "I", drop = FALSE] # height of pandemic
date("2020-02-24") + which(fit$I == max(fit$I))
l <- length(data$totale_positivi)
l <- length(data$totale_casi)
fit$real <- c(data$totale_casi, rep("", times=100-l))
print(R0)
print(fit)
legend("bottomright", c("Susceptibles", "Infecteds", "Recovereds"), lty = 1, lwd = 2, col = col, inset = 0.05)
library(earlyR)
library(dplyr)
library(ggplot2)
library(deSolve)
data <- read.csv("https://github.com/pcm-dpc/COVID-19/raw/master/dati-andamento-nazionale/dpc-covid19-ita-andamento-nazionale.csv")
Infected <- data$totale_positivi
Day <- 1:(length(Infected))
N <- 60000000 # population of italy
print(Infected)
SIR <- function(time, state, parameters) {
par <- as.list(c(state, parameters))
with(par, {
dS <- -beta/N * I * S
dI <- beta/N * I * S - gamma * I
dR <- gamma * I
list(c(dS, dI, dR))
})
}
init <- c(S = N-Infected[1], I = Infected[1], R = 0)
RSS <- function(parameters) {
names(parameters) <- c("beta", "gamma")
out <- ode(y = init, times = Day, func = SIR, parms = parameters)
fit <- out[ , 3]
sum((Infected - fit)^2)
}
Opt <- optim(c(0.5, 0.5), RSS, method = "L-BFGS-B", lower = c(0, 0), upper = c(1, 1))
Opt$message
Opt_par <- setNames(Opt$par, c("beta", "gamma"))
Opt_par
t <- 1:100
fit <- data.frame(ode(y = init, times = t, func = SIR, parms = Opt_par))
col <- 1:3
print(fit)
matplot(fit$time, fit[ , 2:4], type = "l", xlab = "Day", ylab = "Number of subjects", lwd = 2, lty = 1, col = col)
matplot(fit$time, fit[ , 2:4], type = "l", xlab = "Day", ylab = "Number of subjects", lwd = 2, lty = 1, col = col, log = "y")
points(Day, Infected)
legend("bottomright", c("Susceptibles", "Infecteds", "Recovereds"), lty = 1, lwd = 2, col = col, inset = 0.05)
title("SIR model 2019-nCoV Italia", outer = TRUE, line = -2)
R0 <- setNames(Opt_par["beta"] / Opt_par["gamma"], "R0")
fit[fit$I == max(fit$I), "I", drop = FALSE] # height of pandemic
date("2020-02-24") + which(fit$I == max(fit$I))
Date("2020-02-24") + which(fit$I == max(fit$I))
as.Date("2020-02-24") + which(fit$I == max(fit$I))
l <- length(data$totale_positivi)
fit$data <- seq(from=as.Date(data$data[1]), to=as.Date(data$data[1])+99, "days")
fit$real <- c(data$totale_positivi, rep("", times=100-l))
print(R0)
print(fit)
source('~/GitHub/kruschke-doing_bayesian_data_analysis/2e/DBDA2E-utilities.R', echo=TRUE)
source('~/GitHub/kruschke-doing_bayesian_data_analysis/2e/Jags-ExampleScript.R', echo=TRUE)
source('~/GitHub/kruschke-doing_bayesian_data_analysis/2e/Jags-ExampleScript.R', echo=TRUE)
plot(cars)
source("DBDA2E-utilities.R") # Must be in R's current working directory.
require(rjags)               # Must have previously installed package rjags.
fileNameRoot="Jags-ExampleScript" # For output file names.
dTheta <- array(dim=7)
graphics.off() # This closes all of R's graphics windows.
rm(list=ls())  # Careful! This clears all of R's memory!
source("DBDA2E-utilities.R") # Must be in R's current working directory.
require(rjags)               # Must have previously installed package rjags.
fileNameRoot="Jags-ExampleScript" # For output file names.
dTheta <- array(dim=7)
dTheta <- array(dim=7)
dTheta
dTheta <- array(data=[1, 2, 3, 4, 5, 6, 7])
dTheta <- array(data=(1, 2, 3, 4, 5, 6, 7))
dTheta <- array(data={1, 2, 3, 4, 5, 6, 7})
dTheta <- c(1, 2, 3, 4, 5, 6, 7)
dTheta
dTheta <- c(1, 2, 3, 4, 5, 6, 7)
dTheta[1]
dTheta <- c(1, 2, 3, 4, 5, 6, 7)
dTheta[2]
dTheta <- c(1, 2, 3, 4, 5, 6, 7)
dTheta
dTheta <- c(1, 2, 3, 4, 5, 6, 7)
dTheta
sum(dTheta)
Theta <- c(1, 2, 3, 4, 5, 6, 7)
Theta
sumTheta = sum(Theta)
Theta <- c(1, 2, 3, 4, 5, 6, 7)
Theta
sumTheta = sum(Theta)
dTheta = array(dim=7)
modelString = "
model {
for ( i in 1:7 ) {
dTheta[i] = i / sumTheta
}
theta ~ dcat(dTheta)
}
" # close quote for modelString
writeLines( modelString , con="ISLANDSmodel.txt" )
inits = function(){
iThetas = c(1, 0, 0, 0, 0, 0, 0)
resampledThetas = sample(iThetas)
return( list(theta=iThetas) )
}
inits
inits()
inits()
inits()
inits()
inits()
inits()
inits()
inits()
inits()
inits()
inits()
inits()
inits = function(){
iThetas = c(1, 0, 0, 0, 0, 0, 0)
resampledThetas = sample(iThetas, replace=TRUE)
return( list(theta=iThetas) )
}
inits()
inits()
inits()
inits()
inits()
inits()
inits()
inits()
inits()
inits()
inits()
inits()
inits()
inits()
inits()
inits()
inits()
inits()
inits()
inits()
inits()
inits()
inits()
inits()
inits()
inits()
inits()
inits()
inits()
inits()
inits = function(){
iThetas = c(1, 0, 0, 0, 0, 0, 0)
resampledThetas = sample(iThetas, replace=TRUE)
return( list(theta=resampledThetas) )
}
inits()
inits()
inits()
inits()
inits()
inits()
inits = function(){
iThetas = c(1, 0, 0, 0, 0, 0, 0)
resampledThetas = sample(iThetas, replace=FALSE)
return( list(theta=resampledThetas) )
}
inits()
inits()
inits()
inits()
inits()
inits()
inits()
inits()
inits()
inits()
inits()
inits()
inits()
inits()
jagsModel = jags.model( file="ISLANDSmodel.txt" , inits=inits ,
n.chains=3 , n.adapt=500 )
Theta <- c(1, 2, 3, 4, 5, 6, 7)
Theta
sumTheta = sum(Theta)
dTheta = array(dim=7)
modelString = "
model {
for ( i in 1:7 ) {
dTheta[i] = i / sumTheta
}
theta ~ dcat(dTheta)
}
" # close quote for modelString
writeLines( modelString , con="ISLANDSmodel.txt" )
jagsModel = jags.model( file="ISLANDSmodel.txt" , inits=inits ,
n.chains=3 , n.adapt=500 )
jagsModel = jags.model( file="ISLANDSmodel.txt" , inits=inits ,
n.chains=3 , n.adapt=500 )
sum(7)
modelString = "
model {
for ( i in 1:7 ) {
dTheta[i] = i / 28
}
theta ~ dcat(dTheta)
}
" # close quote for modelString
writeLines( modelString , con="ISLANDSmodel.txt" )
inits = function(){
iThetas = c(1, 0, 0, 0, 0, 0, 0)
resampledThetas = sample(iThetas, replace=FALSE)
return( list(theta=resampledThetas) )
}
jagsModel = jags.model( file="ISLANDSmodel.txt" , inits=inits ,
n.chains=3 , n.adapt=500 )
jagsModel = jags.model( file="ISLANDSmodel.txt" ,
n.chains=3 , n.adapt=500 )
update( jagsModel , n.iter=500 )
codaSamples = coda.samples( jagsModel , variable.names=c("theta") ,
n.iter=3000 )
save( codaSamples , file=paste0(fileNameRoot,"McmcISLANDS.Rdata") )
diagMCMC( codaObject=codaSamples , parName="theta" )
diagMCMC( codaObject=codaSamples , parName="theta" )
diagMCMC( codaObject=codaSamples , parName="theta" )
saveGraph( file=paste0(fileNameRoot,"ISLANDS") , type="eps" )
plotPost( codaSamples[,"theta"] , main="theta" , xlab=bquote(theta) )
saveGraph( file=paste0(fileNameRoot,"ISLANDSpost") , type="eps" )
plot(codaSamples)
plot(codaSamples[,"theta"])
update( jagsModel , n.iter=10 )
codaSamples = coda.samples( jagsModel , variable.names=c("theta") , n.iter=100 )
save( codaSamples , file=paste0(fileNameRoot,"McmcISLANDS.Rdata") )
diagMCMC( codaObject=codaSamples , parName="theta" )
saveGraph( file=paste0(fileNameRoot,"ISLANDS") , type="eps" )
plotPost( codaSamples[,"theta"] , main="theta" , xlab=bquote(theta) )
saveGraph( file=paste0(fileNameRoot,"ISLANDSpost") , type="eps" )
plot(codaSamples)
jagsModel = jags.model( file="ISLANDSmodel.txt" ,
n.chains=3 , n.adapt=10 )
update( jagsModel , n.iter=10 )
codaSamples = coda.samples( jagsModel , variable.names=c("theta") , n.iter=500 )
save( codaSamples , file=paste0(fileNameRoot,"McmcISLANDS.Rdata") )
diagMCMC( codaObject=codaSamples , parName="theta" )
saveGraph( file=paste0(fileNameRoot,"ISLANDS") , type="eps" )
plot(codaSamples)
codaSamples = coda.samples( jagsModel , variable.names=c("theta") , n.iter=1000 )
save( codaSamples , file=paste0(fileNameRoot,"McmcISLANDS.Rdata") )
diagMCMC( codaObject=codaSamples , parName="theta" )
saveGraph( file=paste0(fileNameRoot,"ISLANDS") , type="eps" )
plot(codaSamples)
update( jagsModel , n.iter=100 )
codaSamples = coda.samples( jagsModel , variable.names=c("theta") , n.iter=1000 )
save( codaSamples , file=paste0(fileNameRoot,"McmcISLANDS.Rdata") )
plot(codaSamples)
# Load the functions used below:
source("DBDA2E-utilities.R") # Must be in R's current working directory.
require(rjags)               # Must have previously installed package rjags.
fileNameRoot="Jags-ExampleScript" # For output file names.
# Load the data:
myData = read.csv("z15N50.csv") # Read data file; must be in curr. work. dir.
y = myData$y        # The y values are in the column named y.
Ntotal = length(y)  # Compute the total number of flips.
dataList = list(    # Put the information into a list.
y = y ,
Ntotal = Ntotal
)
# Define the model:
modelString = "
model {
for ( i in 1:Ntotal ) {
y[i] ~ dbern( theta )
}
theta ~ dbeta( 1 , 1 )
}
" # close quote for modelString
writeLines( modelString , con="TEMPmodel.txt" )
# Initialize the chains based on MLE of data.
# Option: Use single initial value for all chains:
#  thetaInit = sum(y)/length(y)
#  initsList = list( theta=thetaInit )
# Option: Use function that generates random values for each chain:
initsList = function() {
resampledY = sample( y , replace=TRUE )
thetaInit = sum(resampledY)/length(resampledY)
thetaInit = 0.001+0.998*thetaInit # keep away from 0,1
return( list( theta=thetaInit ) )
}
# Run the chains:
jagsModel = jags.model( file="TEMPmodel.txt" , data=dataList , inits=initsList ,
n.chains=3 , n.adapt=500 )
update( jagsModel , n.iter=500 )
codaSamples = coda.samples( jagsModel , variable.names=c("theta") ,
n.iter=3334 )
save( codaSamples , file=paste0(fileNameRoot,"Mcmc.Rdata") )
plot(codaSamples)
codaSamples = coda.samples( jagsModel , variable.names=c("theta") , n.iter=300 )
codaSamples = coda.samples( jagsModel , variable.names=c("theta") , n.iter=300 )
save( codaSamples , file=paste0(fileNameRoot,"McmcISLANDS.Rdata") )
diagMCMC( codaObject=codaSamples , parName="theta" )
saveGraph( file=paste0(fileNameRoot,"ISLANDS") , type="eps" )
plot(codaSamples)
graphics.off() # This closes all of R's graphics windows.
rm(list=ls())  # Careful! This clears all of R's memory!
source("DBDA2E-utilities.R") # Must be in R's current working directory.
require(rjags)               # Must have previously installed package rjags.
fileNameRoot="Jags-ExampleScript" # For output file names.
graphics.off() # This closes all of R's graphics windows.
rm(list=ls())  # Careful! This clears all of R's memory!
source("DBDA2E-utilities.R") # Must be in R's current working directory.
require(rjags)               # Must have previously installed package rjags.
fileNameRoot="Jags-ExampleScript" # For output file names.
graphics.off() # This closes all of R's graphics windows.
rm(list=ls())  # Careful! This clears all of R's memory!
source("DBDA2E-utilities.R") # Must be in R's current working directory.
require(rjags)               # Must have previously installed package rjags.
fileNameRoot="Jags-ExampleScript" # For output file names.
Theta <- c(1, 2, 3, 4, 5, 6, 7)
Theta
sumTheta = sum(Theta)
dTheta = array(dim=7)
modelString = "
model {
for ( i in 1:7 ) {
dTheta[i] = i / 28
}
theta ~ dcat(dTheta)
}
" # close quote for modelString
writeLines( modelString , con="ISLANDSmodel.txt" )
inits = function(){
iThetas = c(1, 0, 0, 0, 0, 0, 0)
resampledThetas = sample(iThetas, replace=FALSE)
return( list(theta=resampledThetas) )
}
jagsModel = jags.model( file="ISLANDSmodel.txt" ,
n.chains=3 , n.adapt=10 )
update( jagsModel , n.iter=100 )
codaSamples = coda.samples( jagsModel , variable.names=c("theta") , n.iter=300 )
save( codaSamples , file=paste0(fileNameRoot,"McmcISLANDS.Rdata") )
diagMCMC( codaObject=codaSamples , parName="theta" )
saveGraph( file=paste0(fileNameRoot,"ISLANDS") , type="eps" )
plot(codaSamples)
graphics.off() # This closes all of R's graphics windows.
rm(list=ls())  # Careful! This clears all of R's memory!
source("DBDA2E-utilities.R") # Must be in R's current working directory.
require(rjags)               # Must have previously installed package rjags.
fileNameRoot="Jags-ExampleScript" # For output file names.
Theta <- c(1, 2, 3, 4, 5, 6, 7)
Theta
sumTheta = sum(Theta)
dTheta = array(dim=7)
modelString = "
model {
for ( i in 1:7 ) {
dTheta[i] = i / 28
}
theta ~ dcat(dTheta)
}
" # close quote for modelString
writeLines( modelString , con="ISLANDSmodel.txt" )
inits = function(){
iThetas = c(1, 0, 0, 0, 0, 0, 0)
resampledThetas = sample(iThetas, replace=FALSE)
return( list(theta=resampledThetas) )
}
jagsModel = jags.model( file="ISLANDSmodel.txt" ,
n.chains=1 , n.adapt=10 )
update( jagsModel , n.iter=100 )
codaSamples = coda.samples( jagsModel , variable.names=c("theta") , n.iter=300 )
save( codaSamples , file=paste0(fileNameRoot,"McmcISLANDS.Rdata") )
diagMCMC( codaObject=codaSamples , parName="theta" )
saveGraph( file=paste0(fileNameRoot,"ISLANDS") , type="eps" )
plot(codaSamples)
graphics.off() # This closes all of R's graphics windows.
rm(list=ls())  # Careful! This clears all of R's memory!
source("DBDA2E-utilities.R") # Must be in R's current working directory.
require(rjags)               # Must have previously installed package rjags.
fileNameRoot="Jags-ExampleScript" # For output file names.
Theta <- c(1, 2, 3, 4, 5, 6, 7)
Theta
sumTheta = sum(Theta)
dTheta = array(dim=7)
modelString = "
model {
for ( i in 1:7 ) {
dTheta[i] = i / 28
}
theta ~ dcat(dTheta)
}
" # close quote for modelString
writeLines( modelString , con="ISLANDSmodel.txt" )
inits = function(){
iThetas = c(1, 0, 0, 0, 0, 0, 0)
resampledThetas = sample(iThetas, replace=FALSE)
return( list(theta=resampledThetas) )
}
jagsModel = jags.model( file="ISLANDSmodel.txt" ,
n.chains=2 , n.adapt=10 )
update( jagsModel , n.iter=100 )
codaSamples = coda.samples( jagsModel , variable.names=c("theta") , n.iter=300 )
save( codaSamples , file=paste0(fileNameRoot,"McmcISLANDS.Rdata") )
diagMCMC( codaObject=codaSamples , parName="theta" )
saveGraph( file=paste0(fileNameRoot,"ISLANDS") , type="eps" )
plot(codaSamples)
graphics.off() # This closes all of R's graphics windows.
rm(list=ls())  # Careful! This clears all of R's memory!
source("DBDA2E-utilities.R") # Must be in R's current working directory.
require(rjags)               # Must have previously installed package rjags.
fileNameRoot="Jags-ExampleScript" # For output file names.
Theta <- c(1, 2, 3, 4, 5, 6, 7)
Theta
sumTheta = sum(Theta)
dTheta = array(dim=7)
modelString = "
model {
for ( i in 1:7 ) {
dTheta[i] = i / 28
}
theta ~ dcat(dTheta)
}
" # close quote for modelString
writeLines( modelString , con="ISLANDSmodel.txt" )
inits = function(){
iThetas = c(1, 0, 0, 0, 0, 0, 0)
resampledThetas = sample(iThetas, replace=FALSE)
return( list(theta=resampledThetas) )
}
jagsModel = jags.model( file="ISLANDSmodel.txt" ,
n.chains=2 , n.adapt=10 )
update( jagsModel , n.iter=100 )
codaSamples = coda.samples( jagsModel , variable.names=c("theta") , n.iter=300 )
save( codaSamples , file=paste0(fileNameRoot,"McmcISLANDS.Rdata") )
diagMCMC( codaObject=codaSamples , parName="theta" )
saveGraph( file=paste0(fileNameRoot,"ISLANDS") , type="eps" )
plot(codaSamples)
graphics.off() # This closes all of R's graphics windows.
rm(list=ls())  # Careful! This clears all of R's memory!
source("DBDA2E-utilities.R") # Must be in R's current working directory.
require(rjags)               # Must have previously installed package rjags.
fileNameRoot="Jags-ExampleScript" # For output file names.
Theta <- c(1, 2, 3, 4, 5, 6, 7)
Theta
sumTheta = sum(Theta)
dTheta = array(dim=7)
modelString = "
model {
for ( i in 1:7 ) {
dTheta[i] = i / 28
}
theta ~ dcat(dTheta)
}
" # close quote for modelString
writeLines( modelString , con="ISLANDSmodel.txt" )
inits = function(){
iThetas = c(1, 0, 0, 0, 0, 0, 0)
resampledThetas = sample(iThetas, replace=FALSE)
return( list(theta=resampledThetas) )
}
jagsModel = jags.model( file="ISLANDSmodel.txt" ,
n.chains=2 , n.adapt=10 )
update( jagsModel , n.iter=100 )
codaSamples = coda.samples( jagsModel , variable.names=c("theta") , n.iter=5000 )
save( codaSamples , file=paste0(fileNameRoot,"McmcISLANDS.Rdata") )
diagMCMC( codaObject=codaSamples , parName="theta" )
saveGraph( file=paste0(fileNameRoot,"ISLANDS") , type="eps" )
plot(codaSamples)
graphics.off() # This closes all of R's graphics windows.
rm(list=ls())  # Careful! This clears all of R's memory!
source("DBDA2E-utilities.R") # Must be in R's current working directory.
require(rjags)               # Must have previously installed package rjags.
fileNameRoot="Jags-ExampleScript" # For output file names.
Theta <- c(1, 2, 3, 4, 5, 6, 7)
Theta
sumTheta = sum(Theta)
dTheta = array(dim=7)
modelString = "
model {
for ( i in 1:7 ) {
dTheta[i] = i / 28
}
theta ~ dcat(dTheta)
}
" # close quote for modelString
writeLines( modelString , con="ISLANDSmodel.txt" )
inits = function(){
iThetas = c(1, 0, 0, 0, 0, 0, 0)
resampledThetas = sample(iThetas, replace=FALSE)
return( list(theta=resampledThetas) )
}
jagsModel = jags.model( file="ISLANDSmodel.txt" ,
n.chains=3 , n.adapt=100 )
update( jagsModel , n.iter=100 )
codaSamples = coda.samples( jagsModel , variable.names=c("theta") , n.iter=5000 )
save( codaSamples , file=paste0(fileNameRoot,"McmcISLANDS.Rdata") )
diagMCMC( codaObject=codaSamples , parName="theta" )
saveGraph( file=paste0(fileNameRoot,"ISLANDS") , type="eps" )
plot(codaSamples)
source('~/GitHub/kruschke-doing_bayesian_data_analysis/2e/Jags-Ydich-XmetMulti-Mlogistic-Example.R', echo=TRUE)
#-------------------------------------------------------------------------------
# Optional generic preliminaries:
graphics.off() # This closes all of R's graphics windows.
rm(list=ls())  # Careful! This clears all of R's memory!
